enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                 String              @id @default(uuid())
    name               String?
    email              String?             @unique
    pictureUrl         String?             @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation    String?

    status             UserStatus          @default(VERIFIED)

    // this is the role of the user for the application
    globalRole         String              @default('USER')
    password           String?             @password @omit
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt @default(now())

    playlists          Playlist[]          @relation("user")
    meditationSessions MeditationSession[] @relation("user")
    subscriptions      Subscription[]      @relation("user")
    reminders          Reminder[]          @relation("user")
    favorites          Favorite[]          @relation("user")
    communityPosts     CommunityPost[]     @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Category {

    id          String   @id @default(uuid())
    name        String
    description String?

    tracks      Track[]  @relation("category")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Track {

    id                 String              @id @default(uuid())
    title              String
    description        String?
    duration           Float
    audioUrl           String
    creatorName        String?
    offlineEnabled     Boolean

    categoryId         String?
    category           Category?           @relation(fields: [categoryId], references: [id], name: "category")

    playlistTracks     PlaylistTrack[]     @relation("track")
    meditationSessions MeditationSession[] @relation("track")
    favorites          Favorite[]          @relation("track")
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt @default(now())
    @@allow("all", true)
}

model Playlist {

    id             String          @id @default(uuid())
    name           String
    description    String?
    isPublic       Boolean

    userId         String
    user           User?           @relation(fields: [userId], references: [id], name: "user")

    playlistTracks PlaylistTrack[] @relation("playlist")
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt @default(now())
    @@allow("all", true)
}

model PlaylistTrack {

    id         String    @id @default(uuid())
    position   Float

    playlistId String
    playlist   Playlist? @relation(fields: [playlistId], references: [id], name: "playlist")
    trackId    String
    track      Track?    @relation(fields: [trackId], references: [id], name: "track")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model MeditationSession {

    id          String   @id @default(uuid())
    duration    Float
    completedAt String?
    rating      Float?

    userId      String
    user        User?    @relation(fields: [userId], references: [id], name: "user")
    trackId     String
    track       Track?   @relation(fields: [trackId], references: [id], name: "track")

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Subscription {

    id               String   @id @default(uuid())
    planType         String
    status           String
    startDate        String
    endDate          String?
    stripeCustomerId String?

    userId           String
    user             User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Reminder {

    id        String   @id @default(uuid())
    time      String
    frequency String
    isEnabled Boolean

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Favorite {

    id        String   @id @default(uuid())

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")
    trackId   String
    track     Track?   @relation(fields: [trackId], references: [id], name: "track")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model CommunityPost {

    id        String   @id @default(uuid())
    content   String
    title     String
    type      String

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

